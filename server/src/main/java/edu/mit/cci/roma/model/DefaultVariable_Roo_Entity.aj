// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.mit.cci.roma.model;

import javax.persistence.Column;

import edu.mit.cci.roma.impl.DefaultVariable;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import javax.persistence.Version;
import java.util.List;

privileged aspect DefaultVariable_Roo_Entity {

    declare @type: DefaultVariable:@Entity;


    declare @field:**DefaultVariable.id:@Id;
    declare @field:**DefaultVariable.id:@GeneratedValue(strategy=GenerationType.AUTO);
    declare @field:**DefaultVariable.id:@Column(name="id");

    declare @field:**DefaultVariable.indexingVariable:@ManyToOne(targetEntity = DefaultVariable.class);


    declare @field:**DefaultVariable:dataType:@Enumerated;

    declare @field:**DefaultVariable:arity:@NotNull;

    declare @field:**DefaultVariable:description:@Column(columnDefinition = "LONGTEXT");




    @PersistenceContext
    transient EntityManager DefaultVariable.entityManager;


    @Version
    @Column(name = "version")
    private Integer DefaultVariable.version;


    public Integer DefaultVariable.getVersion() {
        return this.version;
    }

    public void DefaultVariable.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void DefaultVariable.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void DefaultVariable.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            DefaultVariable attached = DefaultVariable.findDefaultVariable(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void DefaultVariable.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public DefaultVariable DefaultVariable.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        DefaultVariable merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static final EntityManager DefaultVariable.entityManager() {
        EntityManager em = new DefaultVariable().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long DefaultVariable.countDefaultVariables() {
        return entityManager().createQuery("select count(o) from DefaultVariable o", Long.class).getSingleResult();
    }

    public static List<DefaultVariable> DefaultVariable.findAllDefaultVariables() {
        return entityManager().createQuery("select o from DefaultVariable o", DefaultVariable.class).getResultList();
    }

    public static DefaultVariable DefaultVariable.findDefaultVariable(Long id) {
        if (id == null) return null;
        return entityManager().find(DefaultVariable.class, id);
    }

    public static List<DefaultVariable> DefaultVariable.findDefaultVariableEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from DefaultVariable o", DefaultVariable.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

}
