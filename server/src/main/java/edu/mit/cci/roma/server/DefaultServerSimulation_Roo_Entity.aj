// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.mit.cci.roma.server;

import org.springframework.transaction.annotation.Transactional;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import java.util.List;

privileged aspect DefaultServerSimulation_Roo_Entity {

    declare @type: DefaultServerSimulation:@Entity;

    declare @field:**DefaultServerSimulation.id:@Id;
    declare @field:**DefaultServerSimulation.id:@GeneratedValue(strategy=GenerationType.AUTO);
    declare @field:**DefaultServerSimulation.id:@Column(name="id");

    declare @field:**DefaultServerSimulation.created:@Temporal(TemporalType.TIMESTAMP);

    declare @field:**DefaultServerSimulation.description:@Column(columnDefinition="LONGTEXT");

    declare @field:**DefaultServerSimulation.type:@Column(columnDefinition="LONGTEXT");

    declare @field:**DefaultServerSimulation.inputs:@ManyToMany(cascade=CascadeType.ALL,targetEntity=DefaultVariable.class);

    declare @field:**DefaultServerSimulation.outputs:@ManyToMany(cascade=CascadeType.ALL,targetEntity=DefaultVariable.class);

    declare @field:**DefaultServerSimulation.runStrategy:@Transient;


    @PersistenceContext
    transient EntityManager DefaultServerSimulation.entityManager;


    @Version
    @Column(name = "version")
    private Integer DefaultServerSimulation.version;


    public Integer DefaultServerSimulation.getVersion() {
        return this.version;
    }

    public void DefaultServerSimulation.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void DefaultServerSimulation.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void DefaultServerSimulation.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            DefaultServerSimulation attached = DefaultServerSimulation.findDefaultServerSimulation(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void DefaultServerSimulation.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public DefaultServerSimulation DefaultServerSimulation.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        DefaultServerSimulation merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static final EntityManager DefaultServerSimulation.entityManager() {
        EntityManager em = new DefaultServerSimulation().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long DefaultServerSimulation.countDefaultServerSimulations() {
        return entityManager().createQuery("select count(o) from DefaultServerSimulation o", Long.class).getSingleResult();
    }

    public static List<DefaultServerSimulation> DefaultServerSimulation.findAllDefaultServerSimulations() {
        return entityManager().createQuery("select o from DefaultServerSimulation o", DefaultServerSimulation.class).getResultList();
    }

    public static DefaultServerSimulation DefaultServerSimulation.findDefaultServerSimulation(Long id) {
        if (id == null) return null;
        return entityManager().find(DefaultServerSimulation.class, id);
    }

    public static List<DefaultServerSimulation> DefaultServerSimulation.findDefaultServerSimulationEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from DefaultServerSimulation o", DefaultServerSimulation.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

}
